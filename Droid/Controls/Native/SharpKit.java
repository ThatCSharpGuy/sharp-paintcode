package sharppaintcode.droid.controls.Native;

import android.graphics.Paint;
import android.graphics.RectF;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Path;



/**
 * Created by Antonio Feregrino on 6/3/17.
 * Copyright © 2017 That C# guy. All rights reserved.
 *
 * Generated by PaintCode
 * http://www.paintcodeapp.com
 *
 * @author Antonio Feregrino
 */
public class SharpKit
{


    // Resizing Behavior
    public enum ResizingBehavior
    {
        AspectFit, //!< The content is proportionally resized to fit into the target rectangle.
        AspectFill, //!< The content is proportionally resized to completely fill the target rectangle.
        Stretch, //!< The content is stretched to match the entire target rectangle.
        Center, //!< The content is centered in the target rectangle, but it is NOT resized.
    }

    // Canvas Drawings
    // Sharp

    private static class CacheForSharpCanvas
    {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 100f, 100f);
        private static RectF resizedFrame = new RectF();
        private static RectF sharpFrame = new RectF();
        private static RectF sharpSymbolRect = new RectF();
        private static Path sharpSymbolPath = new Path();
    }

    public static void drawSharpCanvas(Canvas canvas, int fillColor, float width, float height)
    {
        SharpKit.drawSharpCanvas(canvas, new RectF(0f, 0f, 100f, 100f), ResizingBehavior.AspectFit, fillColor, width, height);
    }

    public static void drawSharpCanvas(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int fillColor, float width, float height)
    {
        // General Declarations
        Paint paint = CacheForSharpCanvas.paint;

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForSharpCanvas.resizedFrame;
        SharpKit.resizingBehaviorApply(resizing, CacheForSharpCanvas.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 100f, resizedFrame.height() / 100f);

        // SharpFrame
        RectF sharpFrame = CacheForSharpCanvas.sharpFrame;
        sharpFrame.set(0f, 0f, width, height);

        // SharpSymbol
        RectF sharpSymbolRect = CacheForSharpCanvas.sharpSymbolRect;
        sharpSymbolRect.set(0f, 0f, 100f, 100f);
        Path sharpSymbolPath = CacheForSharpCanvas.sharpSymbolPath;
        sharpSymbolPath.reset();
        sharpSymbolPath.moveTo(sharpFrame.left + sharpFrame.width() * 0.8f, sharpFrame.top + sharpFrame.height() * 0.00002f);
        sharpSymbolPath.cubicTo(sharpFrame.left + sharpFrame.width() * 0.8f, sharpFrame.top, sharpFrame.left + sharpFrame.width() * 0.8f, sharpFrame.top + sharpFrame.height() * 0.08245f, sharpFrame.left + sharpFrame.width() * 0.8f, sharpFrame.top + sharpFrame.height() * 0.2f);
        sharpSymbolPath.lineTo(sharpFrame.left + sharpFrame.width(), sharpFrame.top + sharpFrame.height() * 0.2f);
        sharpSymbolPath.lineTo(sharpFrame.left + sharpFrame.width(), sharpFrame.top + sharpFrame.height() * 0.4f);
        sharpSymbolPath.lineTo(sharpFrame.left + sharpFrame.width() * 0.8f, sharpFrame.top + sharpFrame.height() * 0.4f);
        sharpSymbolPath.cubicTo(sharpFrame.left + sharpFrame.width() * 0.8f, sharpFrame.top + sharpFrame.height() * 0.46586f, sharpFrame.left + sharpFrame.width() * 0.8f, sharpFrame.top + sharpFrame.height() * 0.53414f, sharpFrame.left + sharpFrame.width() * 0.8f, sharpFrame.top + sharpFrame.height() * 0.6f);
        sharpSymbolPath.lineTo(sharpFrame.left + sharpFrame.width(), sharpFrame.top + sharpFrame.height() * 0.6f);
        sharpSymbolPath.lineTo(sharpFrame.left + sharpFrame.width(), sharpFrame.top + sharpFrame.height() * 0.8f);
        sharpSymbolPath.lineTo(sharpFrame.left + sharpFrame.width() * 0.8f, sharpFrame.top + sharpFrame.height() * 0.8f);
        sharpSymbolPath.cubicTo(sharpFrame.left + sharpFrame.width() * 0.8f, sharpFrame.top + sharpFrame.height() * 0.91755f, sharpFrame.left + sharpFrame.width() * 0.8f, sharpFrame.top + sharpFrame.height(), sharpFrame.left + sharpFrame.width() * 0.8f, sharpFrame.top + sharpFrame.height());
        sharpSymbolPath.lineTo(sharpFrame.left + sharpFrame.width() * 0.6f, sharpFrame.top + sharpFrame.height());
        sharpSymbolPath.cubicTo(sharpFrame.left + sharpFrame.width() * 0.6f, sharpFrame.top + sharpFrame.height(), sharpFrame.left + sharpFrame.width() * 0.6f, sharpFrame.top + sharpFrame.height() * 0.91755f, sharpFrame.left + sharpFrame.width() * 0.6f, sharpFrame.top + sharpFrame.height() * 0.8f);
        sharpSymbolPath.lineTo(sharpFrame.left + sharpFrame.width() * 0.4f, sharpFrame.top + sharpFrame.height() * 0.8f);
        sharpSymbolPath.cubicTo(sharpFrame.left + sharpFrame.width() * 0.4f, sharpFrame.top + sharpFrame.height() * 0.91755f, sharpFrame.left + sharpFrame.width() * 0.4f, sharpFrame.top + sharpFrame.height(), sharpFrame.left + sharpFrame.width() * 0.4f, sharpFrame.top + sharpFrame.height());
        sharpSymbolPath.lineTo(sharpFrame.left + sharpFrame.width() * 0.2f, sharpFrame.top + sharpFrame.height());
        sharpSymbolPath.cubicTo(sharpFrame.left + sharpFrame.width() * 0.2f, sharpFrame.top + sharpFrame.height(), sharpFrame.left + sharpFrame.width() * 0.2f, sharpFrame.top + sharpFrame.height() * 0.91755f, sharpFrame.left + sharpFrame.width() * 0.2f, sharpFrame.top + sharpFrame.height() * 0.8f);
        sharpSymbolPath.lineTo(sharpFrame.left, sharpFrame.top + sharpFrame.height() * 0.8f);
        sharpSymbolPath.lineTo(sharpFrame.left, sharpFrame.top + sharpFrame.height() * 0.6f);
        sharpSymbolPath.lineTo(sharpFrame.left + sharpFrame.width() * 0.2f, sharpFrame.top + sharpFrame.height() * 0.6f);
        sharpSymbolPath.cubicTo(sharpFrame.left + sharpFrame.width() * 0.2f, sharpFrame.top + sharpFrame.height() * 0.53414f, sharpFrame.left + sharpFrame.width() * 0.2f, sharpFrame.top + sharpFrame.height() * 0.46586f, sharpFrame.left + sharpFrame.width() * 0.2f, sharpFrame.top + sharpFrame.height() * 0.4f);
        sharpSymbolPath.lineTo(sharpFrame.left, sharpFrame.top + sharpFrame.height() * 0.4f);
        sharpSymbolPath.lineTo(sharpFrame.left, sharpFrame.top + sharpFrame.height() * 0.2f);
        sharpSymbolPath.lineTo(sharpFrame.left + sharpFrame.width() * 0.2f, sharpFrame.top + sharpFrame.height() * 0.2f);
        sharpSymbolPath.cubicTo(sharpFrame.left + sharpFrame.width() * 0.2f, sharpFrame.top + sharpFrame.height() * 0.08245f, sharpFrame.left + sharpFrame.width() * 0.2f, sharpFrame.top, sharpFrame.left + sharpFrame.width() * 0.2f, sharpFrame.top);
        sharpSymbolPath.lineTo(sharpFrame.left + sharpFrame.width() * 0.4f, sharpFrame.top);
        sharpSymbolPath.cubicTo(sharpFrame.left + sharpFrame.width() * 0.4f, sharpFrame.top, sharpFrame.left + sharpFrame.width() * 0.4f, sharpFrame.top + sharpFrame.height() * 0.08245f, sharpFrame.left + sharpFrame.width() * 0.4f, sharpFrame.top + sharpFrame.height() * 0.2f);
        sharpSymbolPath.lineTo(sharpFrame.left + sharpFrame.width() * 0.6f, sharpFrame.top + sharpFrame.height() * 0.2f);
        sharpSymbolPath.cubicTo(sharpFrame.left + sharpFrame.width() * 0.6f, sharpFrame.top + sharpFrame.height() * 0.08245f, sharpFrame.left + sharpFrame.width() * 0.6f, sharpFrame.top, sharpFrame.left + sharpFrame.width() * 0.6f, sharpFrame.top);
        sharpSymbolPath.lineTo(sharpFrame.left + sharpFrame.width() * 0.8f, sharpFrame.top);
        sharpSymbolPath.lineTo(sharpFrame.left + sharpFrame.width() * 0.8f, sharpFrame.top + sharpFrame.height() * 0.00002f);
        sharpSymbolPath.close();
        sharpSymbolPath.moveTo(sharpFrame.left + sharpFrame.width() * 0.6f, sharpFrame.top + sharpFrame.height() * 0.4f);
        sharpSymbolPath.lineTo(sharpFrame.left + sharpFrame.width() * 0.4f, sharpFrame.top + sharpFrame.height() * 0.4f);
        sharpSymbolPath.cubicTo(sharpFrame.left + sharpFrame.width() * 0.4f, sharpFrame.top + sharpFrame.height() * 0.46586f, sharpFrame.left + sharpFrame.width() * 0.4f, sharpFrame.top + sharpFrame.height() * 0.53414f, sharpFrame.left + sharpFrame.width() * 0.4f, sharpFrame.top + sharpFrame.height() * 0.6f);
        sharpSymbolPath.lineTo(sharpFrame.left + sharpFrame.width() * 0.6f, sharpFrame.top + sharpFrame.height() * 0.6f);
        sharpSymbolPath.cubicTo(sharpFrame.left + sharpFrame.width() * 0.6f, sharpFrame.top + sharpFrame.height() * 0.53414f, sharpFrame.left + sharpFrame.width() * 0.6f, sharpFrame.top + sharpFrame.height() * 0.46586f, sharpFrame.left + sharpFrame.width() * 0.6f, sharpFrame.top + sharpFrame.height() * 0.4f);
        sharpSymbolPath.close();

        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(fillColor);
        canvas.drawPath(sharpSymbolPath, paint);

        canvas.restore();
    }


    // Resizing Behavior
    public static void resizingBehaviorApply(ResizingBehavior behavior, RectF rect, RectF target, RectF result)
    {
        if (rect.equals(target) || target == null)
        {
            result.set(rect);
            return;
        }

        if (behavior == ResizingBehavior.Stretch)
        {
            result.set(target);
            return;
        }

        float xRatio = Math.abs(target.width() / rect.width());
        float yRatio = Math.abs(target.height() / rect.height());
        float scale = 0f;

        switch (behavior)
        {
            case AspectFit:
                {
                    scale = Math.min(xRatio, yRatio);
                    break;
                }
            case AspectFill:
                {
                    scale = Math.max(xRatio, yRatio);
                    break;
                }
            case Center:
                {
                    scale = 1f;
                    break;
                }
        }

        float newWidth = Math.abs(rect.width() * scale);
        float newHeight = Math.abs(rect.height() * scale);
        result.set(target.centerX() - newWidth / 2,
            target.centerY() - newHeight / 2,
            target.centerX() + newWidth / 2,
            target.centerY() + newHeight / 2);
    }


}